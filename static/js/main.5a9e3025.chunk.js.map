{"version":3,"sources":["components/Landing.js","components/Ingredients.js","components/Filters.js","components/Results.js","components/MobileResults.js","components/MobileIngredients.js","components/MobileWrap.js","components/Display.js","components/Main.js","components/Recipe.js","App.js","reportWebVitals.js","index.js"],"names":["Landing","className","to","require","config","Ingredients","props","useState","suggestions","setSuggestions","list","setList","inputValue","setInputValue","timer","setTimer","autoComplete","search","console","log","fetch","process","then","response","json","InputEl","useRef","searchFocus","current","focus","ref","type","value","onChange","e","target","clearTimeout","val","newTimer","setTimeout","length","localStorage","getItem","src","alt","map","hit","onClick","selected","searchString","ingredientsList","concat","setItem","JSON","stringify","searchStringAdd","handleClick","name","parse","ing","ingredient","updatedList","filter","item","searchStringRemove","deleteIngredient","searchStringReset","Filters","toggleTimeDropdown","style","display","dropdown","handleTime","toggleGlutenFilter","searchState","backgroundColor","glutenFreeColor","toggleVegetarianFilter","vegetarianColor","Results","contextData","React","useContext","RecipeContext","recipeLimit","setRecipeLimit","targetContainer","useInfiniteScrollHook","slice","recipeItem","pathname","activeClassName","key","state","recipeImage","image","recipeTitle","title","recipeTime","readyInMinutes","ingredients","extendedIngredients","instructions","analyzedInstructions","vegetarian","glutenFree","id","MobileResults","index","MobileIngredients","expandIngredients","MobileWrap","ingredientsStatus","setIngredientsStatus","Display","recipes","createContext","Main","setGlutenFree","setVegetarian","setGlutenFreeColor","setVegetarianColor","setSearch","setRecipes","setDropdown","timeFilter","setTimeFilter","useEffect","vegActive","glutenActive","recipesList","results","newString","ingredientPiece","newSearchString","replace","Provider","glutenStatus","vegStatus","time","Recipe","location","useLocation","shownImage","shownTitle","shownTime","shownIngredients","shownInstructions","steps","original","step","number","App","basename","path","exact","component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.5a9e3025.chunk.js","sourcesContent":["import React from 'react';\r\nimport {Link} from 'react-router-dom';\r\n\r\n\r\nfunction Landing() {\r\n    return (\r\n    <div className = \"base-wrapper\">\r\n        <div className = \"white-block\">\r\n            <div className = \"text-block\">\r\n                <h2>Finding recipes made easy</h2>\r\n                <p className = \"landing-text\"> \r\n                Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna</p>\r\n                <Link to= '/main' className= \"start-link\">\r\n                <button className = \"startbtn\">Get Started</button>\r\n                </Link>\r\n            </div>\r\n            <div className = \"green-block-landing\">\r\n                <div className = \"photo-block\">\r\n                </div>\r\n            </div>\r\n        </div>\r\n    </div>\r\n    );\r\n}\r\n\r\nexport default Landing;","import React, {useState, useRef} from 'react';\r\n\r\nrequire('dotenv').config()\r\n\r\n\r\nfunction Ingredients(props) {\r\n\r\n\r\n\r\n    const [suggestions,setSuggestions] = useState([])\r\n    const [list,setList] = useState([])\r\n    const [inputValue,setInputValue] = useState('')\r\n    const [timer,setTimer]  = useState('')\r\n\r\n    const handleChange = e => {\r\n\r\n        setInputValue(e.target.value)\r\n\r\n        clearTimeout(timer)\r\n        const val = e.target.value\r\n        const newTimer = setTimeout(() => {\r\n            if(val !== \"\")\r\n            autoComplete(val)\r\n        }, 500)\r\n\r\n        setTimer(newTimer)\r\n\r\n      }\r\n\r\n\r\n      const autoComplete = (search) => {\r\n        console.log(`search ${search}`);\r\n        fetch(`https://api.spoonacular.com/food/ingredients/autocomplete?query=${search}&number=5&apiKey=${process.env.REACT_APP_SPOON_KEY}`)\r\n        .then((response) => response.json())\r\n        .then(autoComplete => {\r\n            setSuggestions(autoComplete);\r\n        })\r\n        console.log(suggestions);\r\n    };\r\n\r\n\r\n\r\n    const handleClick = (selected) => {\r\n        let searchString = props.search + \",\" + selected;\r\n        let ingredientsList = list.concat([selected]);\r\n        setSuggestions(\"\");\r\n        setList(ingredientsList);\r\n        localStorage.setItem(\"activeList\",\"true\");\r\n        console.log(list);\r\n\r\n        localStorage.setItem(\"list\",JSON.stringify(ingredientsList));\r\n        setInputValue(\"\");\r\n        searchFocus();\r\n\r\n\r\n\r\n\r\n        console.log(searchString)\r\n        console.log(ingredientsList)\r\n\r\n        props.searchStringAdd(searchString)\r\n\r\n    }\r\n    \r\n    // focus on input feild on suggestion click\r\n    const InputEl = useRef();\r\n    const searchFocus = () => {\r\n\r\n\r\n        InputEl.current.focus();\r\n    }\r\n    \r\n\r\n\r\n\r\n    const deleteIngredient = (ingredient) => {\r\n\r\n        //remove clicked ingredient from list\r\n        const listCopy = [...list];\r\n        const updatedList = listCopy.filter(item => item !== ingredient);\r\n\r\n        setList(updatedList)\r\n        if (updatedList.length === 0) {\r\n            localStorage.setItem(\"activeList\",\"false\");\r\n        }\r\n        localStorage.setItem(\"list\",JSON.stringify(updatedList));\r\n        console.log(updatedList)\r\n\r\n        //remove clicked ingredient from search state\r\n\r\n        props.searchStringRemove(ingredient)\r\n\r\n    }\r\n\r\n    const resetSearch = () => { //Remove all ingredients\r\n        setList([]);\r\n        localStorage.setItem(\"list\",JSON.stringify([]));\r\n        props.searchStringReset();\r\n        localStorage.setItem(\"activeList\",\"false\");\r\n        \r\n\r\n    }\r\n\r\n\r\n        return (\r\n\r\n            <div className = \"green-block-main\">\r\n                <div className = \"green-upper-wrapper\">\r\n                    <h4>Ingredients</h4>\r\n                    <form className = \"search-form\">\r\n                        <input className = \"search-bar\" ref={InputEl} type=\"text\" value = {inputValue} onChange= {handleChange}>\r\n                        </input>\r\n                    </form>\r\n                    <div className = \"green-info-wrapper\">\r\n                        {suggestions.length === 0 && localStorage.getItem(\"activeList\") !== \"true\" &&(\r\n                        <div className = \"green-instructions-wrapper\">\r\n                        <img className = \"green-arrow\"  src = {process.env.PUBLIC_URL +'/img/greenarrow.png'} alt = \"up arrow\"></img>\r\n                        <p className = \"green-instructions\">Add an ingredient to begin your search</p>\r\n\r\n                        </div>\r\n                        )}\r\n                        {suggestions.length !== 0 && (\r\n                        <div className = \"auto-complete-dropdown\">\r\n                            {suggestions.map(hit =>{\r\n                                return (\r\n                                    <p className = \"suggestions\" key = {hit.name} onClick = {()=> {handleClick(hit.name)}}>{hit.name}</p>\r\n                                )\r\n                            })}\r\n                        </div>\r\n                        )}\r\n                        {localStorage.getItem(\"list\") && (\r\n                            <div className=\"ing-list\">\r\n                                {JSON.parse(localStorage.getItem(\"list\")).map(ing => {\r\n                                    return (\r\n                                        <div key={ing} className=\"ing-wrapper\">\r\n                                            <li className=\"ingredient\">{ing}</li>\r\n                                            <button onClick={() => deleteIngredient(ing)} className=\"ing-x-button\">X</button>\r\n                                        </div>\r\n                                    );\r\n                                })}\r\n                            </div>\r\n                        )}\r\n                    </div>\r\n                </div>\r\n                {localStorage.getItem(\"activeList\") === \"true\" &&(\r\n                    <button className = \"reset-button\" onClick={() => resetSearch()}>Reset</button>\r\n                )}\r\n\r\n            </div>\r\n\r\n        );\r\n    }\r\n\r\nexport default Ingredients;","import React from 'react';\r\n\r\nfunction Filters(props) {\r\n\r\n\r\n\r\n\r\n    \r\n\r\n        return (\r\n\r\n            <div className = \"filter-wrapper\">\r\n                <div className = \"time-wrapper\">\r\n                    <div className = \"time-button\">\r\n                        <div className = \"time-light\">\r\n                            <p className = \"filter-text\">\r\n                                Time\r\n                            </p>\r\n                        </div>\r\n                        <div className = \"time-dark\" onClick={()=> props.toggleTimeDropdown()}>\r\n                        <img className = \"filter-arrow\"  src = {process.env.PUBLIC_URL +'/img/filterarrow.png'} alt = \"drop down arrow\"></img>\r\n                        </div>\r\n                    </div>\r\n                    <div className = \"time-dropdown\"\r\n                    style={{display: props.dropdown}}>\r\n                        <button className = \"time-option\"\r\n                        onClick={()=> props.handleTime(\"15\")}>\r\n                            15 min\r\n                        </button>\r\n                        <button className = \"time-option\"\r\n                        onClick={()=> props.handleTime(\"30\")}>\r\n                            30 min\r\n                        </button>\r\n                        <button className = \"time-option\"\r\n                        onClick={()=> props.handleTime(\"60\")}>\r\n                            1 hr\r\n                        </button>\r\n                    </div>\r\n                </div>\r\n                <div className = \"diet-wrapper\">\r\n                    <div className = \"diet-light\">\r\n                        <p className = \"filter-text\">\r\n                            Diet\r\n                        </p>\r\n                    </div>\r\n                    <div className = \"diet-dark\">\r\n                        <div className = \"filter-wrapper\">\r\n                            <button className = \"gluten-btn\"  \r\n                            onClick={()=> props.toggleGlutenFilter(props.searchState)} \r\n                            style={{backgroundColor: props.glutenFreeColor}}>\r\n\r\n                            </button>\r\n                            <p className = \"filter-subtext\">Gluten free</p>\r\n                        </div>\r\n                        <div className = \"filter-wrapper\">\r\n                            <button className = \"veg-btn\"\r\n                            onClick={()=> props.toggleVegetarianFilter(props.searchState)}\r\n                            style={{backgroundColor: props.vegetarianColor}}>\r\n                                \r\n                            </button>\r\n                            <p className = \"filter-subtext\">Vegetarian</p>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n}\r\n\r\nexport default Filters;","import React, {useState, useRef } from 'react';\r\nimport { useInfiniteScrollHook } from 'use-infinite-scroll-hook/lib';\r\nimport {Link} from 'react-router-dom';\r\nimport {RecipeContext} from \"./Main\";\r\n\r\n\r\n\r\n\r\nfunction Results() {\r\n\r\n    let contextData = React.useContext(RecipeContext);\r\n\r\n    const [recipeLimit,setRecipeLimit] = useState(10)\r\n\r\n\r\n    const showMore = () => {\r\n                setRecipeLimit(recipeLimit + 10)\r\n                console.log(\"should be loading more\")\r\n    }\r\n\r\n\r\n    const targetContainer = useRef(null);\r\n\r\n    const loadData = () => showMore();\r\n    \r\n    useInfiniteScrollHook(targetContainer, loadData);\r\n\r\n    return (   \r\n    <div className = \"white-block-main\" ref = {targetContainer}>\r\n        {contextData && contextData.slice(0,recipeLimit).map((recipeItem) => {\r\n            return  (\r\n                <div className = \"linkWrapper\" key = {recipeItem.id}>\r\n                    <Link\r\n                    \r\n                    to= {{\r\n                    pathname:'/recipe',\r\n                    activeClassName:\"recipe-card\",\r\n                    key:{recipeItem},\r\n                    state:{recipeImage: recipeItem.image,\r\n                            recipeTitle: recipeItem.title,\r\n                            recipeTime: recipeItem.readyInMinutes,\r\n                            ingredients: recipeItem.extendedIngredients,\r\n                            instructions: recipeItem.analyzedInstructions,\r\n                            vegetarian: recipeItem.vegetarian,\r\n                            glutenFree: recipeItem.glutenFree\r\n                            }}}>\r\n                        <div className = \"recipe-card\" key = {recipeItem.id} \r\n                        // onClick={() => console.log(\"clicked\"),\r\n                        // localStorage.setItem(\"recipeImage\",process.env.PUBLIC_URL +recipeItem.image),\r\n                        // localStorage.setItem(\"recipeIngredients\",JSON.stringify(recipeItem.extendedIngredients)),\r\n                        // localStorage.setItem(\"recipeInstructions\",JSON.stringify(recipeItem.analyzedInstructions)),\r\n                        // localStorage.setItem(\"recipeTitle\",recipeItem.title),\r\n                        // localStorage.setItem(\"recipeTime\",recipeItem.readyInMinutes),\r\n                        // console.log(recipeItem.title)}\r\n                        >\r\n\r\n                            <img className = \"recipe-image\" src = {recipeItem.image} alt = {recipeItem.title}></img>\r\n                            <div className = \"recipe-card-title-bar\">\r\n                                <p key={recipeItem.id} className = \"card-text\">{recipeItem.title}</p>\r\n                            </div>\r\n                            <div className = \"recipe-card-icon-bar\">\r\n                                <div className = \"time-display\">\r\n                                <img className = \"clock-logo\" src = {process.env.PUBLIC_URL +'/img/clock.png'} alt = \"time icon\"></img>\r\n                                <p className = \"card-icon-text\">{recipeItem.readyInMinutes} min </p>\r\n                                </div>\r\n                                <div className = \"diet-display\">\r\n                                {recipeItem.vegetarian === true && (<img className = \"veg-logo\" src = {process.env.PUBLIC_URL +'/img/Vegetarian.png'} alt = \"vegetarian icon\"></img>)}\r\n                                {recipeItem.glutenFree === true && (<img className = \"gluten-logo\" src = {process.env.PUBLIC_URL +'/img/Gluten.png'} alt = \"gluten free icon\"></img>)}\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </Link>\r\n                 </div>\r\n            )}\r\n            \r\n        )}\r\n\r\n\r\n\r\n        {!contextData && (\r\n\r\n            <img className = \"placeholder-plate\"  src = {process.env.PUBLIC_URL +'/img/plate.png'} alt = \"plate with fork\"></img>\r\n\r\n            )}\r\n\r\n\r\n\r\n    </div>\r\n    )\r\n}\r\n\r\nexport default Results;","import React, {useState, useRef } from 'react';\r\nimport { useInfiniteScrollHook } from 'use-infinite-scroll-hook/lib';\r\nimport {Link} from 'react-router-dom';\r\nimport {RecipeContext} from \"./Main\";\r\n\r\nfunction MobileResults() {\r\n\r\n    let contextData = React.useContext(RecipeContext);\r\n\r\n    const [recipeLimit,setRecipeLimit] = useState(10)\r\n\r\n\r\n    const showMore = () => {\r\n                setRecipeLimit(recipeLimit + 10)\r\n                console.log(\"should be loading more\")\r\n    }\r\n\r\n\r\n    const targetContainer = useRef(null);\r\n\r\n    const loadData = () => showMore();\r\n    \r\n    useInfiniteScrollHook(targetContainer, loadData);\r\n\r\n    return (\r\n    \r\n    <div className = \"white-mobile\" ref = {targetContainer}>\r\n        {contextData && contextData.slice(0,recipeLimit).map((recipeItem, index) => {\r\n            return  (\r\n                <div className = \"linkWrapper\" key = {recipeItem.id}>\r\n                    <Link\r\n                    to= {{\r\n                    pathname:'/recipe',\r\n                    activeClassName:\"recipe-card\", \r\n                    key:{recipeItem},\r\n                    state:{recipeImage: recipeItem.image,\r\n                            recipeTitle: recipeItem.title,\r\n                            recipeTime: recipeItem.readyInMinutes,\r\n                            ingredients: recipeItem.extendedIngredients,\r\n                            instructions: recipeItem.analyzedInstructions\r\n                            }}}>\r\n                        <div className = \"recipe-card\" key = {index}>\r\n\r\n                            <img className = \"recipe-image\" src = {recipeItem.image} alt = {recipeItem.title}></img>\r\n                            <div className = \"recipe-card-title-bar\">\r\n                                <p key={index} className = \"card-text\">{recipeItem.title}</p>\r\n                            </div>\r\n                            <div className = \"recipe-card-icon-bar\">\r\n                                <div className = \"time-display\">\r\n                                <img className = \"clock-logo\" src = {process.env.PUBLIC_URL +'/img/clock.png'} alt = \"time icon\"></img>\r\n                                <p className = \"card-icon-text\">{recipeItem.readyInMinutes} min </p>\r\n                                </div>\r\n                                <div className = \"diet-display\">\r\n                                {recipeItem.vegetarian === true && (<img className = \"veg-logo\" src = {process.env.PUBLIC_URL +'/img/Vegetarian.png'} alt = \"vegetarian icon\"></img>)}\r\n                                {recipeItem.glutenFree === true && (<img className = \"gluten-logo\" src = {process.env.PUBLIC_URL +'/img/Gluten.png'} alt = \"gluten free icon\"></img>)}\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </Link>\r\n                </div>\r\n            )}\r\n            \r\n        )}\r\n\r\n\r\n\r\n        {!contextData && (\r\n\r\n            <img className = \"placeholder-plate\"  src = {process.env.PUBLIC_URL +'/img/plate.png'} alt = \"plate with fork\"></img>\r\n\r\n            )}\r\n\r\n\r\n\r\n    </div>\r\n\r\n    )\r\n}\r\n\r\nexport default MobileResults;","import React, { useState, useRef } from 'react';\r\n\r\n\r\n\r\nfunction MobileIngredients(props) {\r\n\r\n    const [suggestions,setSuggestions] = useState([]);\r\n    const [list,setList] = useState([]);\r\n    const [inputValue,setInputValue] = useState('');\r\n    const [timer,setTimer]  = useState('');\r\n\r\nconst handleChange = e => {\r\n\r\n    setInputValue(e.target.value)\r\n\r\n    clearTimeout(timer)\r\n    const val = e.target.value\r\n    const newTimer = setTimeout(() => {\r\n        if(val !== \"\")\r\n        autoComplete(val)\r\n    }, 500)\r\n\r\n    setTimer(newTimer)\r\n\r\n  }\r\n\r\n\r\n  const autoComplete = (search) => {\r\n    console.log(`search ${search}`);\r\n    fetch(`https://api.spoonacular.com/food/ingredients/autocomplete?query=${search}&number=5&apiKey=${process.env.REACT_APP_SPOON_KEY}`)\r\n    .then((response) => response.json())\r\n    .then(autoComplete => {\r\n        setSuggestions(autoComplete);\r\n    })\r\n    console.log(suggestions);\r\n};\r\n\r\nconst handleClick = (selected) => {\r\n    let searchString = props.search + \",\" + selected;\r\n    let ingredientsList = list.concat([selected]);\r\n    setSuggestions(\"\");\r\n    setList(ingredientsList);\r\n    localStorage.setItem(\"activeList\",\"true\");\r\n    console.log(list);\r\n\r\n    localStorage.setItem(\"list\",JSON.stringify(ingredientsList));\r\n    setInputValue(\"\");\r\n    searchFocus();\r\n\r\n\r\n\r\n\r\n    console.log(searchString)\r\n    console.log(ingredientsList)\r\n\r\n    props.searchStringAdd(searchString)\r\n\r\n}\r\n\r\nconst deleteIngredient = (ingredient) => {\r\n\r\n    //remove clicked ingredient from list\r\n    const listCopy = [...list];\r\n    const updatedList = listCopy.filter(item => item !== ingredient);\r\n\r\n    setList(updatedList)\r\n    if (updatedList.length === 0) {\r\n        localStorage.setItem(\"activeList\",\"false\");\r\n    }\r\n    localStorage.setItem(\"list\",JSON.stringify(updatedList));\r\n    console.log(updatedList)\r\n\r\n    //remove clicked ingredient from search state\r\n\r\n    props.searchStringRemove(ingredient)\r\n\r\n}\r\n\r\nconst resetSearch = () => { //Remove all ingredients\r\n    setList([]);\r\n    localStorage.setItem(\"list\",JSON.stringify([]));\r\n    props.searchStringReset();\r\n    localStorage.setItem(\"activeList\",\"false\");\r\n    \r\n\r\n}\r\n\r\nconst InputEl = useRef();\r\nconst searchFocus = () => {\r\n\r\n\r\n    InputEl.current.focus();\r\n};\r\n\r\nreturn(\r\n<div className = \"ingredients-menu\">\r\n    <div className = \"top\">\r\n                <div className = \"top-bar\"> \r\n                    <h6>Ingredients</h6>\r\n                    <img src = {process.env.PUBLIC_URL +'/img/backarrow.png'} className = \"back-arrow-ing\" alt = \"back arrow\" onClick={()=> props.expandIngredients()}></img>\r\n                </div>\r\n                <form className = \"search-form\">\r\n                    <input className = \"search-bar\" ref={InputEl} type=\"text\" value = {inputValue} onChange= {handleChange}>\r\n                    </input>\r\n                </form>\r\n                {suggestions.length === 0 && localStorage.getItem(\"activeList\") !== \"true\" &&(\r\n                    <div className = \"green-instructions-wrapper\">\r\n                    <img className = \"green-arrow\"  src = {process.env.PUBLIC_URL +'/img/greenarrow.png'} alt = \"up arrow\"></img>\r\n                    <p className = \"green-instructions\">Add an ingredient to begin your search</p>\r\n                    </div>\r\n                )}\r\n                {suggestions.length !== 0 && (\r\n                    <div className = \"auto-complete-dropdown\">\r\n                        {suggestions.map(hit =>{\r\n                            return (\r\n                                <p className = \"suggestions\" key = {hit.name} onClick = {()=> {handleClick(hit.name)}}>{hit.name}</p>\r\n                            )\r\n                        })}\r\n                    </div>\r\n                )}\r\n                {localStorage.getItem(\"list\") && (\r\n                    <div className=\"ing-list\">\r\n                        {JSON.parse(localStorage.getItem(\"list\")).map(ing => {\r\n                            return (\r\n                                <div key={ing} className=\"ing-wrapper\">\r\n                                    <li className=\"ingredient\">{ing}</li>\r\n                                    <button onClick={() => deleteIngredient(ing)} className=\"ing-x-button\">X</button>\r\n                                </div>\r\n                            );\r\n                        })}\r\n                    </div>\r\n                )}\r\n    </div>\r\n    <div className = \"bottom\">\r\n                <div className = \"buttons-wrapper\">\r\n                    {localStorage.getItem(\"activeList\") === \"true\" &&(\r\n                        <button className = \"search-button\" onClick={()=> props.expandIngredients()}>Search</button>\r\n                    )}\r\n                    {localStorage.getItem(\"activeList\") === \"true\" &&(\r\n                        <button className = \"reset-button\" onClick={() => resetSearch()}>Reset</button>\r\n                    )}\r\n                </div>\r\n    </div>\r\n</div>\r\n)\r\n}\r\nexport default MobileIngredients","import React, {useState } from 'react';\r\nimport MobileResults from './MobileResults';\r\nimport MobileIngredients from './MobileIngredients';\r\n\r\nfunction MobileWrap(props) {\r\n\r\n    const [ingredientsStatus,setIngredientsStatus] = useState(false);\r\n\r\nconst expandIngredients = () => {\r\n    ingredientsStatus === false ? setIngredientsStatus(true) : setIngredientsStatus(false);\r\n}\r\n\r\n\r\n\r\n    return (\r\n        <div className = \"mobile-wrapper\">\r\n            {ingredientsStatus === true && (<MobileIngredients glutenFree={props.glutenFree}\r\n                vegetarian={props.vegetarian}\r\n                search={props.search}\r\n                searchStringAdd={props.searchStringAdd}\r\n                searchStringRemove={props.searchStringRemove}\r\n                searchStringReset={props.searchStringReset}\r\n                expandIngredients={expandIngredients}/>)}\r\n            {ingredientsStatus === false && (<div className = \"results-wrapper\"><MobileResults/>\r\n\r\n            {ingredientsStatus === false && (<div className = \"green-mobile\">\r\n                <div className = \"mobile-green-button\" onClick={()=> expandIngredients()}>\r\n                    <img src = {process.env.PUBLIC_URL +'/img/plus.png'} className = \"mobile-plus\" alt = \"plus sign\"></img>\r\n                </div>\r\n                <div className = \"mobile-filter-wrapper\">\r\n                    <div className = \"mobile-time-filter\">\r\n                        <h3>Time</h3>\r\n                    </div>\r\n                    <div className = \"mobile-diet-filter\">\r\n                        <h3>Diet</h3>\r\n                    </div>\r\n                \r\n                </div>\r\n            </div>)}\r\n            </div>)}\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default MobileWrap;","import React from 'react';\r\nimport Filters from './Filters';\r\nimport Results from './Results';\r\nimport MobileWrap from './MobileWrap'\r\n\r\n\r\n\r\n\r\n\r\nfunction Display(props) {\r\n\r\n    \r\n\r\n\r\n\r\n\r\n        return (\r\n\r\n            <div className = \"blue-block-main\">\r\n\r\n                <MobileWrap recipes={props.recipes}\r\n                glutenFree={props.glutenFree}\r\n                vegetarian={props.vegetarian}\r\n                search={props.search}\r\n                searchStringAdd={props.searchStringAdd}\r\n                searchStringRemove={props.searchStringRemove}\r\n                searchStringReset={props.searchStringReset}/>\r\n                \r\n                <Results recipes={props.recipes}/>\r\n\r\n                <Filters toggleGlutenFilter={props.toggleGlutenFilter} \r\n                glutenFreeColor={props.glutenFreeColor}\r\n                toggleVegetarianFilter={props.toggleVegetarianFilter}\r\n                vegetarianColor={props.vegetarianColor}\r\n                searchState={props.searchState}\r\n                toggleTimeDropdown={props.toggleTimeDropdown}\r\n                dropdown={props.dropdown}\r\n                handleTime={props.handleTime}/>\r\n                \r\n\r\n            </div>\r\n        );\r\n    }\r\n\r\nexport default Display;","import React, {useState, useEffect } from 'react';\r\nimport Ingredients from \"./Ingredients\";\r\nimport Display from \"./Display\";\r\n\r\nrequire('dotenv').config()\r\n\r\nexport let RecipeContext = React.createContext();\r\n\r\nfunction Main() {\r\n\r\n\r\n    const [glutenFree,setGlutenFree] = useState(() => {\r\n        return localStorage.getItem(\"glutenFree\") || false;\r\n    })\r\n    const [vegetarian,setVegetarian] = useState(() => {\r\n        return localStorage.getItem(\"vegetarian\") || false;\r\n    })\r\n    const [glutenFreeColor,setGlutenFreeColor] = useState(() => {\r\n        const saved = localStorage.getItem(\"glutenFreeColor\");\r\n        const initialValue = saved;\r\n        return initialValue || \"\";\r\n    })\r\n    const [vegetarianColor,setVegetarianColor] = useState(() => {\r\n        const saved = localStorage.getItem(\"vegetarianColor\");\r\n        const initialValue = saved;\r\n        return initialValue || \"\";\r\n    })\r\n    const [search,setSearch] = useState(() => {\r\n        const saved = localStorage.getItem(\"searchString\");\r\n        const initialValue = saved;\r\n        return initialValue || \"\";\r\n    })\r\n    const [recipes,setRecipes] = useState(\"\");\r\n    const [dropdown,setDropdown] = useState(\"none\");\r\n\r\n    const [timeFilter,setTimeFilter] = useState(() => {\r\n        return localStorage.getItem(\"timeFilter\") || \"\";\r\n\r\n    })\r\n\r\n\r\n    //FETCH RECIPES\r\n\r\n\r\n\r\n    useEffect(()=>{\r\n        let vegActive;\r\n        let glutenActive;\r\n\r\n\r\n\r\n        glutenFree === true ? glutenActive=\"&intolerances=gluten\" : glutenActive=\"\"; // toggles gluten filter\r\n        vegetarian === true ? vegActive=\"&diet=vegetarian\" : vegActive=\"\";\r\n        console.log(\"useEffect Fetch\")\r\n        console.log(`--time filter:${timeFilter}`)\r\n        console.log(`--veg filter:${vegetarian}`)\r\n        console.log(`--Gluten Filter:${glutenFree}`)\r\n        console.log(`--search is:${search}`)\r\n\r\n        \r\n        fetch(`https://api.spoonacular.com/recipes/complexSearch?&includeIngredients=${search}&number=40${glutenActive}${vegActive}${timeFilter}&addRecipeInformation=true&instructionsRequired=true&fillIngredients=true&apiKey=${process.env.REACT_APP_SPOON_KEY}`)\r\n        .then((response) => response.json())\r\n        .then(recipesList => {\r\n            setRecipes(recipesList.results)\r\n            console.log(recipesList)\r\n        })\r\n\r\n\r\n    },[timeFilter,glutenFree,vegetarian,search])\r\n\r\n\r\n\r\n    const searchStringAdd = (newString) => {\r\n        setSearch(newString)\r\n        console.log(newString)\r\n        localStorage.setItem(\"searchString\",newString)\r\n    }\r\n    \r\n    const searchStringRemove = (ingredient) => {\r\n        const ingredientPiece = \",\" + ingredient;\r\n        const prevSearchString = search;\r\n        const newSearchString = prevSearchString.replace(ingredientPiece,\"\")\r\n\r\n        setSearch(newSearchString)\r\n        console.log(newSearchString);\r\n    }\r\n\r\n    const searchStringReset = () => {\r\n        setSearch(\"\")\r\n        console.log(\"list reset\")\r\n    }\r\n\r\n\r\n\r\n\r\n    //ORANGE FILTERS\r\n\r\n\r\n    //Time Filters\r\n\r\n\r\n    const toggleTimeDropdown = () => {\r\n        let dropdownStatus = \"none\";\r\n\r\n        dropdown === \"none\" ? dropdownStatus=\"flex\" : dropdownStatus=\"none\";\r\n\r\n        setDropdown(dropdownStatus);\r\n        \r\n    }\r\n    const handleTime = (time) => {\r\n        setTimeFilter(`&maxReadyTime=${time}`)\r\n        localStorage.setItem(\"timeFilter\",\"&maxReadyTime=\"+time)\r\n        toggleTimeDropdown();\r\n        console.log(time)\r\n        \r\n    }\r\n\r\n\r\n\r\n\r\n\r\n    //Diet Filters\r\n\r\n    const toggleGlutenFilter = () => {\r\n        console.log(\"toggle\")\r\n        let glutenStatus=glutenFree;\r\n        if(glutenStatus===false) {\r\n            setGlutenFree(true)\r\n            localStorage.setItem(\"glutenFree\",true)\r\n            setGlutenFreeColor(\"white\")\r\n            localStorage.setItem(\"glutenFreeColor\",\"white\")\r\n            glutenStatus=true\r\n        } else {\r\n            setGlutenFree(false)\r\n            localStorage.setItem(\"glutenFree\",false)\r\n            setGlutenFreeColor(\"\")\r\n            localStorage.setItem(\"glutenFreeColor\",\"\")\r\n            glutenStatus=false\r\n        }\r\n        console.log(glutenStatus)\r\n\r\n\r\n    }\r\n\r\n    const toggleVegetarianFilter = () => {\r\n        console.log(\"toggle\")\r\n        let vegStatus=vegetarian;\r\n        if(vegStatus===false) {\r\n            setVegetarian(true)\r\n            localStorage.setItem(\"vegetarian\",true)\r\n            setVegetarianColor(\"white\")\r\n            localStorage.setItem(\"vegetariancolor\",\"white\")\r\n            vegStatus=true\r\n        } else {\r\n            setVegetarian(false)\r\n            localStorage.setItem(\"vegetarian\",false)\r\n            setVegetarianColor(\"\")\r\n            localStorage.setItem(\"vegetariancolor\",\"\")\r\n            vegStatus=false\r\n        }\r\n        console.log(vegStatus);\r\n\r\n    }\r\n\r\n\r\n\r\n        return (\r\n\r\n        <RecipeContext.Provider value={recipes} >\r\n            <div className = \"base-wrapper-main\">\r\n                <Ingredients glutenFree={glutenFree}\r\n                vegetarian={vegetarian}\r\n                search={search}\r\n                searchStringAdd={searchStringAdd}\r\n                searchStringRemove={searchStringRemove}\r\n                searchStringReset={searchStringReset}\r\n                />\r\n                <Display toggleGlutenFilter={toggleGlutenFilter}\r\n                glutenFreeColor={glutenFreeColor} \r\n                toggleVegetarianFilter={toggleVegetarianFilter}\r\n                vegetarianColor={vegetarianColor}\r\n                searchState={search}\r\n                toggleTimeDropdown={toggleTimeDropdown}\r\n                dropdown={dropdown}\r\n                handleTime={handleTime}\r\n                recipes={recipes}\r\n\r\n                glutenFree={glutenFree}\r\n                vegetarian={vegetarian}\r\n                search={search}\r\n                searchStringAdd={searchStringAdd}\r\n                searchStringRemove={searchStringRemove}\r\n                searchStringReset={searchStringReset}\r\n                />\r\n            </div>\r\n        </RecipeContext.Provider>\r\n        );\r\n}\r\n\r\n\r\n\r\n\r\nexport default Main;","import React, {useEffect} from 'react';\r\nimport { useLocation } from \"react-router-dom\";\r\nimport {Link} from 'react-router-dom';\r\n\r\n\r\n\r\nfunction Recipe() {\r\n\r\n    const location=useLocation()\r\n\r\n    console.log(location.state)\r\n\r\n\r\n\r\n    let shownImage = location.state.recipeImage;\r\n    let shownTitle = location.state.recipeTitle;\r\n    let shownTime = location.state.recipeTime;\r\n    let shownIngredients = JSON.stringify(location.state.ingredients);\r\n    let shownInstructions = JSON.stringify(location.state.instructions[0].steps);\r\n    let vegetarian = location.state.vegetarian;\r\n    let glutenFree = location.state.glutenFree;\r\n\r\n// useEffect(()=>{\r\n\r\n\r\n\r\n//     console.log(shownTitle)\r\n//     console.log(shownIngredients)\r\n//     console.log(shownInstructions)\r\n//     let storedImage = localStorage.setItem(\"storedImage\",process.env.PUBLIC_URL +location.state.recipeImage);\r\n//     let storedIngredients = localStorage.setItem(\"storedIngredients\",JSON.stringify(location.state.ingredients));\r\n//     let storedInstructions = localStorage.setItem(\"storedInstructions\",JSON.stringify(location.state.instructions[0].steps));\r\n//     let storedTitle = localStorage.setItem(\"storedTitle\",location.state.recipeTitle);\r\n//     let storedTime = localStorage.setItem(\"storedTime\",location.state.recipeTime);\r\n// },[])\r\n    console.log(\"check 1\");\r\n    return (\r\n        <div className=\"section-wrapper\">\r\n            <div className=\"rp-green\">\r\n                <Link to='/main'>\r\n                    <img src = {process.env.PUBLIC_URL +'/img/backarrow.png'} className = \"back-arrow\" alt = \"back arrow\"></img>\r\n                </Link>\r\n            </div>\r\n            <div className=\"rp-blue\">\r\n                <div className=\"rp-white\">\r\n\r\n                    <div className = \"recipe-display\">\r\n                        <img className = \"recipe-image\" src = {process.env.PUBLIC_URL + shownImage} alt = \"recipe\"></img>\r\n                        <div className = \"recipe-card-title-bar\">\r\n                            <p className = \"card-text\">{shownTitle}</p>\r\n                        </div>\r\n                        <div className = \"recipe-card-icon-bar\">\r\n                            <div className = \"time-display\">\r\n                            <img className = \"clock-logo\" src = {process.env.PUBLIC_URL +'/img/clock.png'} alt = \"time icon\"></img>\r\n                            <p className = \"card-icon-text\">{shownTime} min </p>\r\n                            </div>\r\n                            <div className = \"time-display\">\r\n                            {vegetarian === true && (<img className = \"veg-logo\" src = {process.env.PUBLIC_URL +'/img/Vegetarian.png'} alt = \"vegetarian icon\"></img>)}\r\n                            {glutenFree === true && (<img className = \"gluten-logo\" src = {process.env.PUBLIC_URL +'/img/Gluten.png'} alt = \"gluten free icon\"></img>)}\r\n                            </div>\r\n                        </div>\r\n                        </div>\r\n\r\n                            <div className = \"recipe-details\">\r\n                                <h3 className = \"ingredients-title\">Ingredients</h3>\r\n                                \r\n                                <div className = \"ingredients-list-wrapper\">\r\n                                    {JSON.parse(shownIngredients).map((ingredient) => {\r\n                                        return  (\r\n                                                <li key={ingredient.id} className = \"ingredients-list\">\r\n                                                    {ingredient.original}\r\n                                                </li>\r\n\r\n                                        )}\r\n                                    \r\n                                    )}\r\n                                </div>\r\n\r\n                                <h3 className = \"instructions-title\">Instructions</h3>\r\n\r\n                                <div className = \"instructions-list-wrapper\">\r\n                                    <ol>\r\n                                        {JSON.parse(shownInstructions).map((instructions) => {\r\n                                            return (\r\n                                                <li key={instructions.number} className = \"instructions-list\">\r\n                                                    \r\n                                                    {instructions.step}\r\n                                                </li>\r\n                                            )\r\n                                        })}\r\n                                    </ol>\r\n                                </div>\r\n                            </div>\r\n\r\n\r\n                </div>\r\n\r\n            </div>\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Recipe;","import React from 'react';\nimport Landing from \"./components/Landing\";\nimport {BrowserRouter as Router, Route, HashRouter} from 'react-router-dom';\nimport Main from './components/Main';\nimport Recipe from './components/Recipe';\n\nfunction App() {\n\n    return (\n      <Router basename='/Recipe-App'>\n      <div className = \"wrapper\">\n        <img className = \"logo\" src = {process.env.PUBLIC_URL +'/img/Smart-chef-logo.png'} alt = \"Smart Chef Logo\"></img>\n        <HashRouter>\n          <Route path=\"/\" exact component={Landing}/>\n          <Route path=\"/main\" exact component={Main}/>\n          <Route path=\"/recipe\" exact component={Recipe}/>\n        </HashRouter>\n      </div>\n      </Router>\n    );\n  }\n\n      \n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}